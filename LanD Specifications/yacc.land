COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'
STRING		: STRING_STD|STRING_ESC
STRING_SKIP	: '\\"' | '\\\\'
STRING_STD	: '"' (STRING_SKIP|.)*? '"'
STRING_ESC	: '@'('"' ~["]* '"')+
LITERAL		: '\'' ('\\\''|'\\\\'|.)*? '\''
DECLARATION_CODE : '%{' (STRING|COMMENT|.)*? '%}'

ID : [_a-zA-Z][_0-9a-zA-Z]*
DECLARATION_NAME : '%'ID

grammar 		=	declaration* '%%' rule* grammar_ending
grammar_ending	=	('%%' Any)?
declaration		=	symbol_declaration | other_declaration
symbol_declaration = ('%token' | '%left' | '%nonassoc' | '%right' | '%type') ('<' ID '>')? (ID|LITERAL)+
other_declaration = DECLARATION_NAME Any
rule			=	ID ':' alternative ('|' alternative)* ';'
alternative		=	(ID | block | LITERAL | '%prec')*
block			=	'{' (Any|block)+ '}'

%%

%parsing start grammar
%parsing skip COMMENT STRING DECLARATION_CODE

%nodes ghost declaration